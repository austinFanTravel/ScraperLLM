# Stage 1: Build stage
FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install Poetry
RUN pip install --user poetry==1.7.1
ENV PATH="/root/.local/bin:${PATH}"

# Copy only the requirements files first for better caching
COPY pyproject.toml poetry.lock* ./

# Install only the necessary dependencies
RUN poetry config virtualenvs.create false \
    && poetry install --no-dev --no-interaction --no-ansi --no-root

# Stage 2: Runtime stage
FROM python:3.11-slim

WORKDIR /app

# Copy only the necessary files from the builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /root/.cache /root/.cache

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install only the necessary Python packages
RUN pip install --no-cache-dir \
    fastapi \
    uvicorn[standard] \
    python-multipart \
    python-dotenv \
    pydantic

# Copy application code (minimal)
COPY scraper_llm/ ./scraper_llm/

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PORT=8000

# Clean up
RUN find /usr/local/lib/python3.11 -type d -name '__pycache__' -exec rm -r {} + \
    && find /usr/local/lib/python3.11 -name '*.pyc' -delete

# Expose the port the app runs on
EXPOSE 8000

# Command to run the application
CMD ["uvicorn", "scraper_llm.web.app:app", "--host", "0.0.0.0", "--port", "8000", "--proxy-headers"]
