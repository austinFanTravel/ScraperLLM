# Stage 1: Build stage
FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install Poetry
RUN pip install --user poetry==1.7.1
ENV PATH="/root/.local/bin:${PATH}"

# Copy only the requirements files first for better caching
COPY pyproject.toml poetry.lock* ./

# Install dependencies without the development ones
RUN poetry config virtualenvs.create false \
    && poetry install --no-dev --no-interaction --no-ansi

# Install only the necessary spaCy model (small version)
RUN pip install --no-cache-dir spacy \
    && python -m spacy download en_core_web_sm

# Install NLTK and download only required data
RUN pip install --no-cache-dir nltk \
    && python -c "import nltk; nltk.download('punkt'); nltk.download('wordnet')"

# Stage 2: Runtime stage
FROM python:3.11-slim

WORKDIR /app

# Copy only the necessary files from the builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /root/.cache /root/.cache

# Copy application code
COPY . .

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH="/root/.local/bin:${PATH}"

# Clean up
RUN apt-get update && apt-get install -y --no-install-recommends \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && find /usr/local/lib/python3.11 -type d -name '__pycache__' -exec rm -r {} + \
    && find /usr/local/lib/python3.11 -name '*.pyc' -delete

# Expose the port the app runs on
EXPOSE 8000

# Command to run the application
CMD ["uvicorn", "scraper_llm.web.app:app", "--host", "0.0.0.0", "--port", "8000", "--proxy-headers"]
